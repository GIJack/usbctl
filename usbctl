#!/usr/bin/env bash

set -e

VERSION="2.0"
SYSCTL_VAR=kernel.deny_new_usb
NEW_DEVICES=
OLD_DEVICES=
TEMPORARY_WAIT=60
SUDO="sudo"

BRIGHT_RED=$(/usr/bin/tput setaf 1;tput bold)
BRIGHT_GREEN=$(/usr/bin/tput setaf 2;tput bold)
NO_COLOR=$(/usr/bin/tput sgr0)
SELF_NAME=$(/usr/bin/basename "$0")

/usr/bin/which pkexec &> /dev/null
PK_EXISTS=${?}

if [[ ${EUID} -eq 0 ]]; then
  SUDO=""
fi

usage() {
  cat 1>&2 << EOF
Usage: ${SELF_NAME} [COMMAND]
Control usb device and protection settings.

COMMANDS:
  protect, disable, off -- disallow new usb devices (protected)
  unprotect, enable, on -- allow new usb devices (unprotected)
  temporary, temp, tmp  -- temporarily disable protection (default ${TEMPORARY_WAIT} sec)
  check                 -- exit with 1 if usb is unprotected
  status                -- print current protection status
  terse                 -- Like status, but terse, suitable for scripts
  list, ls              -- list currently connected usb devices
  log                   -- display usb events in the kernel ring buffer
  version               -- display version information and exit

EOF
  exit 2
}

version() {
  echo "${SELF_NAME} ${VERSION}"
}

deny_new_usb() {
  ${SUDO} /usr/bin/sysctl -q "${SYSCTL_VAR}=${1}"
  usb_status
}

usb_protected() {
  /usr/bin/sysctl -n "${SYSCTL_VAR}"|/usr/bin/grep -q 1
}

usb_status_terse() {
  if usb_protected; then
    echo "PROTECTED"
   else
    echo "UNPROTECTED"
  fi
}

usb_status() {
  echo ""
   if usb_protected; then
    echo "USB Status is ${BRIGHT_GREEN}PROTECTED${NO_COLOR}"
    echo "New USB devices will be ignored!"
   else
    echo "USB Status is ${BRIGHT_RED}UNPROTECTED${NO_COLOR}"
    echo "You may now plug in new USB devices."
  fi
}

usb_list() {
  /usr/bin/lsusb -t
}

temporary() {
  OLD_DEVICES=$(usb_list)
  deny_new_usb 0
  echo 'Press Ctrl-C to finish'
  trap temporary_end INT TERM
  for i in $(seq ${TEMPORARY_WAIT}); do
    sleep 1
    NEW_DEVICES=$(usb_list)
    diff_usb_list "${OLD_DEVICES}" "${NEW_DEVICES}"
    OLD_DEVICES="${NEW_DEVICES}"
  done
  temporary_end
}

temporary_end() {
  deny_new_usb 1
  diff_usb_list "${OLD_DEVICES}" "$(usb_list)"
  exit
}

diff_usb_list() {
  local OLD_DEVICES="${1}"
  local NEW_DEVICES="${2}"
  diff --color <(printf "%s" "${OLD_DEVICES}") <(printf "%s" "${NEW_DEVICES}") ||:
}

usb_log() {
  DMESG=dmesg
  if /usr/bin/sysctl -n kernel.dmesg_restrict | grep -q 1; then
    DMESG="${SUDO} ${DMESG}"
  fi
  ${DMESG} --color="${USBCTL_LOG_COLOR:-always}" --ctime|grep -i usb --color="${USBCTL_GREP_COLOR:-never}"
}

case "$1" in
  on|enable|unprotect)
    deny_new_usb 0
    ;;
  off|disable|protect)
    deny_new_usb 1
    ;;
  temporary|tmp|temp)
    temporary
    ;;
  check)
    usb_protected
    ;;
  status)
    usb_status
    ;;
  terse)
    usb_status_terse
    ;;
  list|ls)
    usb_list
    ;;
  log)
    usb_log
    ;;
  version|--version)
    version
    ;;
  *)
    usage
    ;;
esac

# vim:set noet:
